{"version":3,"sources":["todolistAPI.ts","redux/reducer.ts","AddNewItemForm.tsx","ToDoListTitle.tsx","ToDoListTask.tsx","ToDoListTasks.tsx","ToDoListFooter.tsx","ToDolist.tsx","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx"],"names":["instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","newTaskTitle","todolisId","updatedTask","id","taskId","ADD_TODOLIST","ADD_TASK","CHANGE_TASK","DELETE_TODOLIST","DELETE_TASK","SET_TODOLISTS","SET_TASKS","initialState","todolists","addedDate","order","tasks","completed","deadline","priority","startDate","status","todoListId","createTodolistSuccess","todolist","type","createTaskSuccess","task","updateTaskSuccess","newTask","deleteTodolistSuccess","deleteTaskSuccess","getTodolistsSuccess","setTasks","updateTodolistTitleSuccess","todolistTitle","reducer","state","action","map","tl","t","filter","AddNewItemForm","error","onAddItemClick","newTitle","trim","setState","props","addItem","onChangeInput","e","currentTarget","value","onKeyPress","key","render","classForInput","className","onChange","placeholder","onClick","React","Component","ToDoListTitle","editMode","deactivateEditMode","updateTodolistTitle","activateEditMode","onTitleChanged","deleteTodolist","onBlur","autoFocus","onDoubleClick","ToDoListTask","changeTask","onIsDoneChanged","checked","classForTask","deleteTask","ToDoListTasks","tasksElements","ToDoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","ToDoList","onAddTask","addTask","newFilterValue","updateTask","getFiltredTasks","this","loadTasks","ConnectedToDoList","connect","dispatch","then","res","data","item","getState","finedTodolists","find","forEach","resultCode","allTasks","items","App","addTodolist","td","ToDolist","setTodolists","newTodolist","Boolean","window","location","hostname","match","store","createStore","todolistReducer","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba295661.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport {ITask} from \"./types/types\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/todo-lists\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"0a4552fd-fc88-4874-a12b-39f74cc52685\"}\r\n});\r\n\r\nexport const todolistAPI = {\r\n    getTodolists(){\r\n        return  instance.get(\"\");\r\n    },\r\n    createTodolist(title: string){\r\n        return instance.post(\"\", {title},)\r\n    },\r\n    deleteTodolist(todolistId: string){\r\n        return instance.delete(`/${todolistId}`)\r\n    },\r\n    updateTodolistTitle(todolistId: string, title: string){\r\n        return instance.put(`/${todolistId}`, {title})\r\n    },\r\n    createTask(newTaskTitle: string, todolistId: string){\r\n        return   instance.post(`/${todolistId}/tasks`, {title: newTaskTitle})\r\n    },\r\n    updateTask(todolisId: string, updatedTask: ITask){\r\n        return instance.put(`/${todolisId}/tasks/${updatedTask.id}`, updatedTask)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string){\r\n        return instance.delete(`/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    getTasks(todolistId: string){\r\n        return instance.get(`/${todolistId}/tasks`)\r\n    }\r\n};","import {ITask, ITodolist} from \"../types/types\";\r\nimport {Action} from \"redux\";\r\nimport {todolistAPI} from \"../todolistAPI\";\r\nimport {ThunkAction} from 'redux-thunk'\r\nimport {AppStateType} from \"./store\";\r\n\r\nconst ADD_TODOLIST = \"TodoListTS/reduser/ADD_TODOLIST\";\r\nconst ADD_TASK = \"TodoListTS/reduser/ADD_TASK\";\r\nconst CHANGE_TASK = \"TodoListTS/reduser/CHANGE_TASK\";\r\nconst DELETE_TODOLIST = \"TodoListTS/reduser/DELETE_TODOLIST\";\r\nconst DELETE_TASK = \"TodoListTS/reduser/DELETE_TASK\";\r\nconst SET_TODOLISTS = \"TodoListTS/reduser/SET_TODOLISTS\";\r\nconst SET_TASKS = \"TodoListTS/reduser/SET_TASKS\";\r\nconst UPDATE_TODOLIST_TITLE = \"TodoListTS/reduser/UPDATE_TODOLIST_TITLE\";\r\n\r\ninterface IInitialState {\r\n    todolists: Array<ITodolist>\r\n}\r\n\r\nconst initialState = {\r\n    todolists: [\r\n        {\r\n            addedDate: \"\", id: \"\", order: 0, title: \"\", tasks: [\r\n                {\r\n                    addedDate: \"\",\r\n                    completed: false,\r\n                    deadline: null,\r\n                    order: 0,\r\n                    priority: 0,\r\n                    startDate: null,\r\n                    status: 0,\r\n                    id: \"\",\r\n                    title: \"\",\r\n                    todoListId: \"\"\r\n                }]\r\n        }\r\n    ]\r\n};\r\n\r\nconst reducer = (state = initialState, action: TodolistsReducerActionTypes): IInitialState => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST:\r\n            return {...state, todolists: [...state.todolists, action.todolist]};\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map((tl) => {\r\n                        if (tl.id === action.todolistId) return {...tl, tasks: [...tl.tasks, action.task]};\r\n                        else return tl\r\n                    }\r\n                )\r\n            };\r\n        case UPDATE_TODOLIST_TITLE:\r\n            return {\r\n                ...state, todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) return {...tl, title: action.todolistTitle};\r\n                    else return tl\r\n                })\r\n            };\r\n        case CHANGE_TASK: //action = {type: \"\", taskId, isDone, todolistId}\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) return {\r\n                        ...tl, tasks: tl.tasks.map(t => {\r\n                            if (t.id !== action.taskId) return t;\r\n                            else return action.newTask\r\n                        })\r\n                    };\r\n                    else return tl\r\n                })\r\n            };\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id !== action.todolistId)\r\n            };\r\n\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) return {\r\n                        ...tl, tasks: tl.tasks.filter(t => t.id !== action.taskId)\r\n                    };\r\n                    else return tl\r\n                })\r\n            };\r\n        case SET_TODOLISTS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(tl => ({...tl, tasks: []}))\r\n            };\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) return {...tl, tasks: action.tasks};\r\n                    else return tl;\r\n                })\r\n                ]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ILoadTasks = (todolisId: string) => ThunkAction<void, AppStateType, null, Action>\r\ntype IAddTask = (todolistId: string, title: string) => ThunkAction<void, AppStateType, null, Action>\r\ntype IUpdateTask = (todolistId: string, newTask: ITask) => ThunkAction<void, AppStateType, null, Action>\r\ntype IAddTodolist = (title: string) => ThunkAction<void, AppStateType, null, Action>\r\ntype ISetTodolists = () => ThunkAction<void, AppStateType, null, Action>\r\ntype IDeleteTodolist = (todolistId: string) => ThunkAction<void, AppStateType, null, Action>\r\ntype IDeleteTask = (todolistId: string, taskId: string) => ThunkAction<void, AppStateType, null, Action>\r\ntype IUpdateTodolistTitle = (todolistId: string, todolistTitle: string) => ThunkAction<void, AppStateType, null, Action>\r\n\r\nexport const loadTasks: ILoadTasks = (todolistId) => (dispatch): void => {\r\n    todolistAPI.getTasks(todolistId).then(res => {\r\n        const allTasks = res.data.items;\r\n        dispatch(setTasks(allTasks, todolistId));\r\n    })\r\n};\r\nexport const addTask: IAddTask = (todolistId, title) => (dispatch): void => {\r\n    todolistAPI.createTask(title, todolistId).then(res => {\r\n        const newTask = res.data.data.item;\r\n        dispatch(createTaskSuccess(newTask, todolistId))\r\n    })\r\n};\r\nexport const updateTask: IUpdateTask = (todolistId, newTask) => (dispatch, getState): void => {\r\n    const finedTodolists = getState().todolists.find(tl => tl.id === todolistId);\r\n    if (finedTodolists) {\r\n        finedTodolists.tasks.forEach((t => {\r\n            if (t.id === newTask.id) {\r\n                todolistAPI.updateTask(todolistId, newTask).then(res => {\r\n                    if (res.data.resultCode === 0) dispatch(updateTaskSuccess(newTask.id, newTask, todolistId))\r\n                })\r\n            }\r\n        }))\r\n    }\r\n};\r\nexport const addTodolist: IAddTodolist = (title) => (dispatch): void => {\r\n    todolistAPI.createTodolist(title).then(res => {\r\n        const newTodolist = res.data.data.item;\r\n        dispatch(createTodolistSuccess(newTodolist));\r\n    })\r\n};\r\nexport const setTodolists: ISetTodolists = () => (dispatch): void => {\r\n    todolistAPI.getTodolists().then(res => {\r\n        dispatch(getTodolistsSuccess(res.data));\r\n    })\r\n};\r\nexport const deleteTodolist: IDeleteTodolist = (todolistId) => (dispatch, getState): void => {\r\n    if (getState().todolists.find(tl => tl.id === todolistId)) {\r\n        todolistAPI.deleteTodolist(todolistId).then(res => {\r\n            if (res.data.resultCode === 0) dispatch(deleteTodolistSuccess(todolistId));\r\n        })\r\n    }\r\n};\r\nexport const deleteTask: IDeleteTask = (todolistId, taskId)=> (dispatch): void => {\r\n    todolistAPI.deleteTask(todolistId, taskId).then(res => {\r\n        if (res.data.resultCode === 0) dispatch(deleteTaskSuccess(todolistId, taskId))\r\n    })\r\n};\r\nexport const updateTodolistTitle: IUpdateTodolistTitle = (todolistId, todolistTitle) => (dispatch, getState): void => {\r\n    if (getState().todolists.find(tl => tl.id === todolistId)) {\r\n        todolistAPI.updateTodolistTitle(todolistId, todolistTitle).then(res => {\r\n            if (res.data.resultCode === 0) dispatch(updateTodolistTitleSuccess(todolistId, todolistTitle));\r\n        })\r\n    }\r\n};\r\n\r\ntype TodolistsReducerActionTypes =\r\n    ICreateTodolistSuccess\r\n    | ICreateTaskSuccess\r\n    | IUpdateTaskSuccess\r\n    | IDeleteTodolistSuccess\r\n    |\r\n    IDeleteTaskSuccess\r\n    | IGetTodolistsSuccess\r\n    | ISetTasks\r\n    | IUpdateTodolistTitleSuccess;\r\n\r\ninterface ICreateTodolistSuccess {\r\n    type: typeof ADD_TODOLIST\r\n    todolist: ITodolist\r\n}\r\ninterface ICreateTaskSuccess {\r\n    type: typeof ADD_TASK\r\n    task: ITask\r\n    todolistId: string\r\n}\r\ninterface IUpdateTaskSuccess {\r\n    type: typeof CHANGE_TASK\r\n    taskId: string\r\n    newTask: ITask\r\n    todolistId: string\r\n}\r\ninterface IDeleteTodolistSuccess {\r\n    type: typeof DELETE_TODOLIST\r\n    todolistId: string\r\n}\r\ninterface IDeleteTaskSuccess {\r\n    type: typeof DELETE_TASK\r\n    todolistId: string\r\n    taskId: string\r\n}\r\ninterface IGetTodolistsSuccess {\r\n    type: typeof SET_TODOLISTS\r\n    todolists: Array<ITodolist>\r\n}\r\ninterface ISetTasks {\r\n    type: typeof SET_TASKS\r\n    tasks: Array<ITask>\r\n    todolistId: string\r\n}\r\ninterface IUpdateTodolistTitleSuccess {\r\n    type: typeof UPDATE_TODOLIST_TITLE\r\n    todolistTitle: string\r\n    todolistId: string\r\n}\r\n\r\nconst createTodolistSuccess = (todolist: ITodolist): ICreateTodolistSuccess => ({type: ADD_TODOLIST, todolist});\r\nconst createTaskSuccess = (task: ITask, todolistId: string): ICreateTaskSuccess => ({type: ADD_TASK, task, todolistId});\r\nconst updateTaskSuccess = (taskId: string, newTask: ITask, todolistId: string): IUpdateTaskSuccess => ({\r\n    type: CHANGE_TASK,\r\n    taskId,\r\n    newTask,\r\n    todolistId\r\n});\r\nconst deleteTodolistSuccess = (todolistId: string): IDeleteTodolistSuccess => ({type: DELETE_TODOLIST, todolistId});\r\nconst deleteTaskSuccess = (todolistId: string, taskId: string): IDeleteTaskSuccess => ({\r\n    type: DELETE_TASK,\r\n    todolistId,\r\n    taskId\r\n});\r\nconst getTodolistsSuccess = (todolists: Array<ITodolist>): IGetTodolistsSuccess => ({type: SET_TODOLISTS, todolists});\r\nconst setTasks = (tasks: Array<ITask>, todolistId: string): ISetTasks => ({type: SET_TASKS, tasks, todolistId});\r\nconst updateTodolistTitleSuccess = (todolistId: string, todolistTitle: string): IUpdateTodolistTitleSuccess => ({\r\n    type: UPDATE_TODOLIST_TITLE,\r\n    todolistId,\r\n    todolistTitle\r\n});\r\n\r\nexport default reducer;\r\n\r\n","import React, {ChangeEvent} from \"react\"\r\nimport './App.css';\r\n\r\ninterface IProps {\r\n    addItem: (value: string) => void\r\n}\r\ninterface IState {\r\n    error: boolean\r\n    title: string\r\n}\r\n\r\nclass AddNewItemForm extends React.Component<IProps, IState> {\r\n\r\n    state = {\r\n        error: false,\r\n        title: \"\",\r\n    };\r\n\r\n\r\n    onAddItemClick = (): void => {\r\n        let newTitle = this.state.title;\r\n        if (newTitle.trim() === \"\") {\r\n            this.setState({error: true});\r\n        } else {\r\n            this.props.addItem(newTitle);\r\n            this.setState({\r\n                error: false,\r\n                title: \"\"\r\n            });\r\n        }\r\n    };\r\n\r\n    onChangeInput = (e: ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({\r\n            title: e.currentTarget.value\r\n        });\r\n        e.currentTarget.value===\"\" ? this.setState({error: true}) : this.setState({error:false});\r\n    };\r\n\r\n    onKeyPress = (e: React.KeyboardEvent<HTMLDivElement>): void => {\r\n        if(e.key==='Enter') this.onAddItemClick()\r\n    };\r\n\r\n    render = () => {\r\n        const classForInput = this.state.error ? \"error\": \"\";\r\n        return (\r\n            <div className=\"newItemForm\">\r\n                <input onKeyPress={this.onKeyPress}\r\n                       onChange={this.onChangeInput}\r\n                       type=\"text\"\r\n                       placeholder=\"New item name\"\r\n                       className={`${classForInput} decorationInput`}\r\n                       value={this.state.title}\r\n                />\r\n                <button onClick={this.onAddItemClick}>Add</button>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddNewItemForm;","import React, {ChangeEvent} from 'react';\nimport './App.css';\n\ninterface IProps {\n    deleteTodolist: (todolistId: string) => void\n    updateTodolistTitle: (todolistId: string, todolistTitle: string)  => void\n    todolistId: string\n    title: string\n}\n\ninterface IState {\n    editMode: boolean\n    title: string\n}\n\nclass ToDoListTitle extends React.Component<IProps, IState> {\n    state = {\n        editMode: false,\n        title: this.props.title\n    };\n    deactivateEditMode = (): void => {\n        this.setState({\n            editMode: false\n        });\n        this.props.updateTodolistTitle(this.props.todolistId, this.state.title);\n    };\n    activateEditMode = (): void =>{\n        this.setState({\n            editMode: true\n        })\n    };\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>): void =>{\n        this.setState({\n            title: e.currentTarget.value,\n        })\n    };\n    deleteTodolist = (): void => {\n        this.props.deleteTodolist(this.props.todolistId);\n    };\n    render = () =><div>\n        {this.state.editMode? <input onBlur={this.deactivateEditMode} autoFocus={true} value={this.state.title} onChange={this.onTitleChanged}/>:\n        <h3 onDoubleClick={this.activateEditMode} className=\"todoList-header__title\">{this.props.title}<button onClick={this.deleteTodolist}>X</button></h3>}\n    </div>\n}\n\nexport default ToDoListTitle;\n\n","import React, {ChangeEvent} from 'react';\nimport './App.css';\nimport {ITask} from \"./types/types\";\n\ninterface IProps {\n    todolistId: string\n    deleteTask: (taskId: string) => void\n    changeTask: (updatedTask: ITask) => void\n    task: ITask\n}\n\ninterface IState {\n    editMode: boolean\n    title: string\n}\n\nclass ToDoListTask extends React.Component<IProps, IState> {\n\n    state = {\n        editMode: false,\n        title: this.props.task.title\n    };\n\n    activateEditMode = (): void => {\n        this.setState({\n            editMode: true\n        })\n    };\n\n    deactivateEditMode= (): void => {\n        this.setState({\n            editMode: false\n        });\n        const updatedTask = {...this.props.task, title: this.state.title};\n        this.props.changeTask(updatedTask);\n    };\n\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>): void =>{\n        this.setState({\n            title: e.currentTarget.value\n        })\n    };\n\n    onIsDoneChanged = (e: ChangeEvent<HTMLInputElement>): void => {\n        let status = e.currentTarget.checked ? 2 : 0;\n        const updatedTask = {...this.props.task, status};\n        this.props.changeTask(updatedTask);\n    };\n\n        render = () => {\n            const classForTask = this.props.task.status===2 ? \"todoList-task done\" : \"todoList-task\";\n            let priority;\n            switch (this.props.task.priority) {\n                case 0: priority = \"low\"; break;\n                case 1: priority = \"middle\"; break;\n                case 2: priority = \"hi\"; break;\n                case 3: priority = \"urgently\"; break;\n                case 4: priority = \"later\"; break;\n                default: priority=\"low\"; break;\n            }\n        return (<div className={classForTask}>\n            <input type=\"checkbox\" checked={this.props.task.status===2} onChange={this.onIsDoneChanged} />\n                {this.state.editMode ? <input\n                                        onBlur={this.deactivateEditMode}\n                                        autoFocus={true}\n                                        value={this.state.title}\n                                        onChange={this.onTitleChanged}\n                    /> :\n                    <span onClick={this.activateEditMode}>{this.props.task.title}, priority: {priority}</span>\n                }\n                <button onClick={()=> {this.props.deleteTask(this.props.task.id)}}>X</button>\n        </div>\n        );\n    }\n}\n\n\nexport default ToDoListTask;\n\n","import React from 'react';\nimport ToDoListTask from './ToDoListTask';\nimport {ITask} from \"./types/types\";\n\ninterface IProps {\n    todolistId: string\n    deleteTask: (taskId: string) => void\n    changeTask: (updatedTask: ITask) => void\n    tasks: Array<ITask>\n}\n\nclass ToDoListTasks extends React.Component<IProps> {\n    render = () => {\n        const tasksElements = this.props.tasks.map(\n            task => <ToDoListTask todolistId={this.props.todolistId}\n                                  key={task.id}\n                                  task={task}\n                                  deleteTask={this.props.deleteTask}\n                                  changeTask={this.props.changeTask}\n            />\n        );\n        return (\n                    <div className=\"todoList-tasks\">\n                     {tasksElements}\n                    </div>\n        );\n    }\n}\n\nexport default ToDoListTasks;","import React from 'react';\nimport './App.css';\n\ninterface IProps {\n    changeFilter: (newFilterValue: string) => void\n    filterValue: string\n}\n\ninterface IState {\n    isHidden: boolean\n}\n\nclass ToDoListFooter extends React.Component<IProps, IState> {\n\n    state = {\n        isHidden: false\n    };\n\n    onAllFilterClick = (): void => {this.props.changeFilter(\"All\") };\n    onCompletedFilterClick = (): void => {this.props.changeFilter(\"Completed\")};\n    onActiveFilterClick = (): void => {this.props.changeFilter(\"Active\") };\n    onShowFiltersClick = (): void => {this.setState({isHidden: false})};\n    onHideFiltersClick = (): void => {this.setState({isHidden: true})};\n\n    render = () => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                {!this.state.isHidden && <div>\n                <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\n                <button onClick={ this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\n                <button onClick={ this.onActiveFilterClick} className={classForActive}>Active</button>\n                </div>\n               }\n                {!this.state.isHidden && <span onClick={this.onHideFiltersClick}>hide</span>}\n                {this.state.isHidden && <span onClick={this.onShowFiltersClick}>show</span>}\n            </div>\n        );\n    }\n}\n\nexport default ToDoListFooter;\n","import React from \"react\";\r\nimport {ITask} from \"./types/types\";\r\n\r\n\r\nimport {\r\n    addTask,\r\n    deleteTask,\r\n    deleteTodolist,\r\n    loadTasks,\r\n    updateTask,\r\n    updateTodolistTitle\r\n} from \"./redux/reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport ToDoListTitle from \"./ToDoListTitle\";\r\nimport ToDoListTasks from \"./ToDoListTasks\";\r\nimport ToDoListFooter from \"./ToDoListFooter\";\r\n\r\ninterface IProps {\r\n   id: string\r\n    title: string\r\n    tasks: Array<ITask>\r\n}\r\n\r\ninterface IMapDispatchProps {\r\n    addTask: (todolistId: string, title: string) => void;\r\n    updateTask: (todolistId: string, newTask: ITask) => void\r\n    deleteTask: (todolistId: string, taskId: string) => void\r\n    deleteTodolist: (todolistId: string) => void\r\n    updateTodolistTitle: (todolistId: string, todolistTitle: string)  => void\r\n    loadTasks: (todolisId: string) => void\r\n}\r\n\r\ninterface IState {\r\n    filterValue: string\r\n}\r\n\r\n\r\nclass ToDoList extends React.Component<IProps & IMapDispatchProps, IState> {\r\n\r\n    componentDidMount() {\r\n        this.props.loadTasks(this.props.id);\r\n    }\r\n\r\n    state = {\r\n        filterValue: \"All\",\r\n    };\r\n\r\n\r\n    onAddTask = (newTitle: string): void => {\r\n        this.props.addTask(this.props.id, newTitle);\r\n    };\r\n\r\n    changeFilter = (newFilterValue: string): void => {\r\n        this.setState({\r\n            filterValue: newFilterValue\r\n        })\r\n    };\r\n\r\n    changeTask = (updatedTask: ITask): void => {\r\n        this.props.updateTask(this.props.id, updatedTask)\r\n    };\r\n\r\n    deleteTask = (taskId: string): void => {\r\n        this.props.deleteTask(this.props.id, taskId);\r\n    };\r\n\r\n    render = () => {\r\n        let {tasks = []} = this.props;\r\n        const getFiltredTasks = (tasks: Array<ITask>, filter: string) => {\r\n            return tasks.filter(t => {\r\n                switch (filter) {\r\n                    case 'All':\r\n                        return true;\r\n                    case 'Completed':\r\n                        return t.status===2;\r\n                    case 'Active':\r\n                        return t.status!==2;\r\n                }\r\n            })\r\n        };\r\n\r\n        return (\r\n            <div className=\"todoList\">\r\n                <div className=\"todoList-header\">\r\n                    <ToDoListTitle\r\n                        title={this.props.title}\r\n                        updateTodolistTitle={this.props.updateTodolistTitle}\r\n                        deleteTodolist={this.props.deleteTodolist}\r\n                        todolistId={this.props.id} />\r\n                    <AddNewItemForm addItem={this.onAddTask}/>\r\n                </div>\r\n                <ToDoListTasks todolistId={this.props.id} tasks={getFiltredTasks(tasks, this.state.filterValue)}\r\n                               deleteTask={this.deleteTask}\r\n                               changeTask={this.changeTask}\r\n                />\r\n                < ToDoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst ConnectedToDoList = connect( null, {addTask, updateTask, deleteTask, deleteTodolist, updateTodolistTitle, loadTasks})(ToDoList);\r\n\r\nexport default ConnectedToDoList;\r\n\r\n","import React from 'react'\nimport {ITodolist} from \"./types/types\";\nimport ToDolist from \"./ToDolist\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"./redux/store\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {addTodolist, setTodolists} from \"./redux/reducer\";\n\ninterface IProps {\n}\ninterface IMapStateProps {\n    todolists: Array<ITodolist>\n}\ninterface IMapDispatchProps {\n    addTodolist: (title: string) => void\n    setTodolists: () => void\n}\n\nclass App extends React.Component <IProps & IMapStateProps & IMapDispatchProps> {\n\n    componentDidMount(): void {\n        this.props.setTodolists();\n    }\n\n    addTodolist = (title: string) => {\n        this.props.addTodolist(title);\n    };\n\n    render =() => {\n        const todolists = this.props\n            .todolists\n            .map(td => <ToDolist key={td.id} id={td.id} title={td.title} tasks={td.tasks}/>);\n        return (\n            <>\n                <div>\n                    <AddNewItemForm addItem={this.props.addTodolist}/>\n                </div>\n                <div className=\"App\">\n                    {todolists}\n                </div>\n            </>)\n    };\n}\n\nlet mstp = (state: AppStateType): IMapStateProps => ({\n    todolists: state.todolists\n});\n\nexport default connect(mstp, {addTodolist, setTodolists})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport todolistReducer from \"./reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\n export type AppStateType = ReturnType<typeof todolistReducer>\r\n\r\nconst store = createStore(todolistReducer, applyMiddleware(thunkMiddleware));\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store'\nimport {Provider} from 'react-redux'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}